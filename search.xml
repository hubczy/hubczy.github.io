<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java远程ssh</title>
    <url>/2024/08/08/Java%E8%BF%9C%E7%A8%8Bssh/</url>
    <content><![CDATA[<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre><code>import com.sun.ssh.ssh.SshClient;
import com.sun.ssh.ssh.Session;
import com.sun.ssh.ssh.ConnectionInfo;

public class ManualSSH &#123;
    public static void main(String[] args) &#123;
        try &#123;
            SshClient client = SshClient.setUpDefaultClient();
            client.start();
 
            // 设置连接信息
            String host = &quot;your_host&quot;;
            int port = 22;
            String user = &quot;your_username&quot;;
            String password = &quot;your_password&quot;;
            ConnectionInfo info = new ConnectionInfo(host, port, user, password);
 
            // 创建SSH会话
            Session session = client.connect(info);
            session.authenticate();
 
            // 执行命令
            String command = &quot;ls -l&quot;;
            String output = session.exec(command).getOutput();
            System.out.println(output);
 
            // 关闭会话
            session.close();
            client.stop();
        &#125; catch (Exception e) &#123;
            e.printStackTrace();
        &#125;
    &#125;
&#125;
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo在别的电脑继续写</title>
    <url>/2023/08/26/hexo%E5%9C%A8%E5%88%AB%E7%9A%84%E7%94%B5%E8%84%91%E7%BB%A7%E7%BB%AD%E5%86%99/</url>
    <content><![CDATA[<p>操作步骤</p>
<ol>
<li>安装必要软件</li>
</ol>
<p>安装 Git 客户端<br>安装 node JS</p>
<ol start="2">
<li>拷贝源文件<br>将初始电脑上个人博客文件夹下这几个文件夹拷到当前新电脑的准备设置的博客路径下。</li>
</ol>
<p>_config.yml<br> package.json<br> scaffolds/<br> source/<br> themes/</p>
<ol start="3">
<li>安装hexo<br>在 cmd 下输入下面指令安装 hexo：</li>
</ol>
<p>npm install hexo-cli -g //如果出错，<br>npm install -g hexo 或者sudo npm install -g hexo</p>
<ol start="4">
<li>在新博客路径下，安装三方依赖库</li>
</ol>
<p>npm install<br>npm install hexo-deployer-git –save  // 文章部署到 git 的模块<br>npm install 你的主题所需要的依赖库</p>
<ol start="5">
<li><p>测试<br>这时候使用 hexo s 基本可以看到你新添加的文章了。</p>
</li>
<li><p>GITHUB 添加 SSH KEYS<br>在GitHub的ssh keys那里再添加一个当前电脑的环境生成的key，但是可别把原来的电脑删掉了啊。</p>
</li>
</ol>
<p>首先在本地创建 SSH Keys:</p>
<p>$ ssh-<strong>**</strong> -t rsa -C “<a href="mailto:&#x78;&#x78;&#120;&#120;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#x6d;">&#x78;&#x78;&#120;&#120;&#64;&#x71;&#113;&#x2e;&#x63;&#111;&#x6d;</a>“</p>
<p>后面的邮箱即为 github 注册邮箱，也是你登录 Github 的邮箱，之后会要求确认路径和输入密码，一路回车就行。</p>
<p>成功的话会在 ~/下生成 .ssh文件夹，进去，打开 id_rsa.pub，复制里面的key即可。然后拷贝到 Github 的 SSH Keys(这里要添加一个新的)</p>
<p>然后在终端中，我们再次测试下公钥有没有添加成功：ssh -T <a href="mailto:&#103;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#99;&#x6f;&#109;">&#103;&#105;&#116;&#64;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#99;&#x6f;&#109;</a></p>
<p>会弹出确认命令，输入yes,会弹出你的名字等等，这就代表成功了</p>
<p>然后就可以发布你的博客文章了</p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>vba学习</title>
    <url>/2023/08/13/vba%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>Private Sub CommandButton1_Click()<br>    ‘Dim pth$<br>    ‘With Application.FileDialog(msoFileDialogFolderPicker)<br>    ‘    .Title = “选择文件夹”<br>    ‘    If .Show Then<br>    ‘        pth = .SelectedItems(1)<br>    ‘    End If<br>    ‘End With<br>    ‘If IsEmpty(pth) Then Exit Sub     ‘如果按取消键，退出</p>
<pre><code>&#39;Call get_folder_file(pth)
Dim arr()
Dim ws As Worksheet
Dim lastRow As Long
Dim cell As Range
Dim offsetAfterStart As Range
Dim offsetAfterEnd As Range

Set ws = ThisWorkbook.Sheets(&quot;Sheet3&quot;)
Set rg = ws.UsedRange.Find(What:=&quot;aaaa&quot;, LookIn:=xlValues, LookAt:=xlWhole)
If Not rg Is Nothing Then
    &#39;MsgBox rg.Address
    &#39;MsgBox rg.Column
    &#39;MsgBox rg.Row
    &#39;ThisWorkbook.Worksheets(&quot;Sheet3&quot;).Select
    &#39;MsgBox ThisWorkbook.Worksheets(&quot;Sheet3&quot;).Cells(rg.Column, rg.Column).SpecialCells(xlCellTypeLastCell).Row
    &#39;MsgBox Application.CountIf(ThisWorkbook.Worksheets(&quot;Sheet3&quot;).Columns(rg.Column), &quot;&lt;&gt;&quot;)
    &#39;MsgBox Application.CountA(ThisWorkbook.Worksheets(&quot;Sheet3&quot;).Columns(rg.Column))
    Set offsetAfterStart = Range(rg.Address).Offset(rg.Row, 0)
    MsgBox offsetAfterStart.Address
    Set offsetAfterEnd = Range(rg.Address).Offset(Application.CountA(ws.Columns(rg.Column)) - 1, 0)
    
    &#39;MsgBox ThisWorkbook.Worksheets(&quot;Sheet3&quot;).Range(rg.Address).Offset(Application.CountA(ThisWorkbook.Worksheets(&quot;Sheet3&quot;).Columns(rg.Column)) - 1, 0).Value
    &#39;arr = ThisWorkbook.Worksheets(&quot;Sheet3&quot;).Range(rg.Address).Offset(Application.CountA(ThisWorkbook.Worksheets(&quot;Sheet3&quot;).Columns(rg.Column)) - 1, 0).Value
    &#39;arr = ThisWorkbook.Worksheets(&quot;Sheet3&quot;).Range(rg.Address, Range(rg.Address).Offset(Application.CountA(Columns(rg.Column)) - 1, 0)).Value
    &#39;MsgBox arr
    &#39;arr = Application.WorksheetFunction.Offset(ThisWorkbook.Worksheets(&quot;Sheet3&quot;).UsedRange.Find(What:=&quot;aaaa&quot;, LookIn:=xlValues, LookAt:=xlWhole), 1, 0, Application.CountA(ThisWorkbook.Worksheets(&quot;Sheet3&quot;).Columns(rg.Column)) - 1, 1)
    Dim i As Integer
    MsgBox offsetAfterEnd.Address
     MsgBox offsetAfterEnd.Row
    ReDim arr(0 To offsetAfterEnd.Row)
    i = 0
    For Each cell In ws.Range(offsetAfterStart.Address, offsetAfterEnd.Address)
        If Not IsEmpty(cell.Value) Then  &#39;检查第1列(索引1)是否非空
            MsgBox cell.Value  &#39;如果非空,打印值
            
            arr(i) = cell.Value
            i = i + 1
        End If
    Next cell
    For j = LBound(arr, 1) To UBound(arr, 1) Step 1
    MsgBox j
        MsgBox arr(j)
    Next
End If
</code></pre>
<p>End Sub</p>
<hr>
<pre><code>    Set rg = ws.UsedRange.Find(What:=&quot;P&quot;, LookIn:=xlValues, LookAt:=xlWhole)
    ws.Rows(rg.Row).Copy
    ThisWorkbook.Sheets(&quot;Sheet4&quot;).Rows(1).Insert Shift:=xlDown
     &#39;ThisWorkbook.Sheets(&quot;Sheet4&quot;).Rows(2).PasteSpecial xlPasteAll
     ThisWorkbook.Sheets(&quot;Sheet4&quot;).UsedRange.Find(What:=&quot;P&quot;, LookIn:=xlValues, LookAt:=xlWhole).Clear
     &#39;ThisWorkbook.Sheets(&quot;Sheet4&quot;).Range(rg.Address).Clear
     
     
    Application.CutCopyMode = False
</code></pre>
<hr>
<p>VBA读取txt文件内容</p>
<p>一、打开txt文件<br>在VBA中，我们需要使用FileSystemObject对象来操作文件，首先需要创建一个对象并打开指定的txt文件。</p>
<p>Sub OpenFile()<br>    Dim fso As Object, txtFile As Object<br>    Set fso = CreateObject(“Scripting.FileSystemObject”)<br>    Set txtFile = fso.OpenTextFile(“C:\test.txt”, 1)<br>End Sub<br>代码中，调用CreateObject函数创建了一个FileSystemObject对象，然后使用OpenTextFile方法打开指定的txt文件，1表示以只读方式打开。</p>
<p>二、读取txt文件内容<br>使用FileSystemObject对象的ReadAll、ReadLine、Read和WriteLine等方法可以读取文件中的内容。ReadAll方法可以将文件内容读入到字符串变量中，ReadLine方法可以逐行读取文件中的内容，Read方法可以按字符读取文件内容，WriteLine方法可以将指定的字符串写入文件中，并在末尾添加一个换行符。</p>
<p>Sub ReadTextFile()<br>    Dim fso As Object, txtFile As Object, str As String<br>    Set fso = CreateObject(“Scripting.FileSystemObject”)<br>    Set txtFile = fso.OpenTextFile(“C:\test.txt”, 1)<br>    str = txtFile.ReadAll<br>    Debug.Print str<br>End Sub<br>代码中，使用ReadAll方法读取文件内容，然后将其赋值给变量str，最后通过Debug.Print打印到调试窗口中。</p>
<p>三、逐行读取txt文件内容<br>如果需要逐行读取txt文件中的内容，可以使用FileSystemObject对象的ReadLine方法，可以通过循环逐行读取文件内容。</p>
<p>Sub ReadLine()<br>    Dim fso As Object, txtFile As Object, str As String<br>    Set fso = CreateObject(“Scripting.FileSystemObject”)<br>    Set txtFile = fso.OpenTextFile(“C:\test.txt”, 1)<br>    Do Until txtFile.AtEndOfStream<br>        str = txtFile.ReadLine<br>        Debug.Print str<br>    Loop<br>End Sub<br>代码中，使用Do Until循环，循环条件为txtFile.AtEndOfStream，表示文件未到结尾时一直循环，然后使用ReadLine方法逐行读取文件内容，并通过Debug.Print打印到调试窗口中。</p>
<p>四、按字符读取txt文件内容<br>有时候需要按字符读取txt文件内容，可以使用FileSystemObject对象的Read方法，并通过循环一个个读取字符。</p>
<p>Sub ReadChar()<br>    Dim fso As Object, txtFile As Object, str As String, c As String<br>    Set fso = CreateObject(“Scripting.FileSystemObject”)<br>    Set txtFile = fso.OpenTextFile(“C:\test.txt”, 1)<br>    Do Until txtFile.AtEndOfStream<br>        c = txtFile.Read(1)<br>        str = str &amp; c<br>    Loop<br>    Debug.Print str<br>End Sub<br>代码中，使用Read方法，每次读取一个字符并赋值给变量c，然后通过字符串拼接的方式将所有字符组成一个完整的字符串，并通过Debug.Print打印到调试窗口中。</p>
<p>五、写入txt文件内容<br>使用FileSystemObject对象的Write、WriteLine等方法可以向txt文件中写入内容。</p>
<p>Sub WriteTextFile()<br>    Dim fso As Object, txtFile As Object<br>    Set fso = CreateObject(“Scripting.FileSystemObject”)<br>    Set txtFile = fso.OpenTextFile(“C:\test.txt”, 2)<br>    txtFile.WriteLine “hello world”<br>    txtFile.Close<br>End Sub<br>代码中，使用OpenTextFile方法打开txt文件并以写入方式打开，2表示以写入方式打开。然后使用WriteLine方法将指定字符串写入文件中，最后使用Close方法关闭文件。</p>
<p>六、关闭txt文件<br>在VBA中打开的txt文件必须要关闭，可以使用FileSystemObject对象的Close方法来关闭文件，防止出现错误。</p>
<p>Sub CloseFile()<br>    Dim fso As Object, txtFile As Object<br>    Set fso = CreateObject(“Scripting.FileSystemObject”)<br>    Set txtFile = fso.OpenTextFile(“C:\test.txt”, 1)<br>    txtFile.Close<br>End Sub<br>代码中，使用Close方法关闭已打开的txt文件。</p>
<p>七、总结<br>VBA读取txt文件内容主要是通过FileSystemObject对象来操作文件，包括打开文件、读取文件、写入文件和关闭文件，有了这些方法可以方便地处理txt文件中的内容。</p>
<hr>
<p>去掉Adodb.Stream输出UTF-8该死的BOM<br>摘自：CSDN博主「abababab5」的原创文章</p>
<p>通过Adodb.Stream，可以很方便的读写二进制及及文本流，可读写文件，并可指定文本流的字符集编码。</p>
<p>可是Adodb.Stream输出UTF-8编码的文本流时，会在流的最前端加上BOM。</p>
<p>BOM是什么：Byte Order Mark, UTF-8编码特有的标记，在文件流的开始中占用3个字节“EF BB BF”。（转义16进制：&amp;H）</p>
<p>BOM有什么用处：这里不做讨论，这里要讨论的是如何在Adodb.Stream(以下简化为stream或“流”)中去掉这3个字节的BOM，因为很多时候我们都不希望输出的文件开头包含这3个字节。</p>
<p>最直接简单的做法可以这样：</p>
<p>我们已经知道BOM占用3个字节，那么我们可以在stream中写入UTF-8字符串之后，将stream转换为二进制类型，然后跳过头3个字节，并将剩下的字节用CopyTo()方法拷贝到一个新的stream中去。</p>
<p>不过这样好像有潜在的很严重的性能问题，如果这个文本流比较大，会不会因为处理这个流而耗费双倍的资源？</p>
<p>那我们将上面的方案优化一下。</p>
<p>经过测试发现，stream在“UTF-8”编码的Text方式下首次调用WriteText()方法时，会自动在stream的最开始加入3个字节。</p>
<p>更严格的说，在以下状态下</p>
<p>stream.Position = 0; // 流的位置在最开始时</p>
<p>stream.Type = 3; // adTypeText</p>
<p>stream.Charset = ‘UTF-8’;</p>
<p>调用stream.WriteText()方法时，stream会自动先在流的最开始插入3个字节的BOM。</p>
<p>而stream.Position在任何非0值的情况下，调用WriteText()方法都不会再插入BOM了，可以利用这一点来避免自动插入BOM。</p>
<p>假如我们需要朝stream中写入10个UTF-8字符，我们先按照通常方式在一个刚创建的stream中只写入第一个UTF-8字符。</p>
<p>之后将stream转换为二进制类型(adTypeBinary)，跳过stream开始的3个BOM字节，并读出剩余的字节（这些字节应该只包含刚刚一个字符的数据，不含其它杂质）。</p>
<p>再回到流的开始，将刚刚读出的字节重新写入流，写完后立即调用SetEOS()方法将当前位置设为流末尾。</p>
<p>然后将stream重新转换回文本类型(adTypeText)，并将流当前位置移到流末尾。</p>
<p>此时继续写入剩余的9个UTF-8字符，stream会将其编码后的字节数据直接添加到尾部，而不会再插入BOM了。</p>
<p>此后若需要继续往stream中写入文本，直接调用WriteText()方法即可。</p>
<p>通过测试可以发现，如上方式写入的UTF-8字符串通过ReadText()方法也能正常读出，但是stream.Size却比传统方式直接写入UTF-8的stream小3，很明显就是少了那3个“多余”的BOM字节。</p>
<p>问题到此还未结束。</p>
<p>此时你可能想直接调用stream.SaveToFile()方法保存到文件，你可能会发现，有时保存的文件中还是带有BOM，上述方法无效？</p>
<p>出现这种情况，是因为你漏掉了关键的一步：在调用SaveToFile()方法之前，需要将流转换为二进制类型。</p>
<p>原来还是Adodb.Stream在自作聪明，输出的时候发现UTF-8文本流的开头缺少BOM，又会再次将其加上。</p>
<p>但是若将流类型改为二进制，输出时就可以绕过Adodb.Stream的BOM监测了。<br>‘<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>‘函数名：SaveToFile<br>‘作 用：生成html静态页面，去掉bom标签文件<br>‘参 数： Content内容,FileName路径<br>‘Author：Evller<br>‘<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong><br>Sub SaveToFile(Content, FileName)<br>    Dim stm: Set stm = CreateObject(“adodb.stream”)<br>    stm.Type = 2 ‘以文本模式读取<br>    stm.Mode = 3<br>    stm.Charset = “utf-8”<br>    stm.Open<br>    stm.Writetext (Content)<br>    stm.Position = 3<br>    Dim newStream: Set newStream = CreateObject(“adodb.stream”)<br>    With newStream<br>        .Mode = 3<br>        .Type = 1<br>        .Open<br>    End With<br>    stm.CopyTo (newStream)<br>    newStream.SaveToFile FileName, 2<br>    stm.flush<br>    stm.Close<br>    Set stm = Nothing<br>    Set newStream = Nothing<br>End Sub</p>
<hr>
<p>用VBS判断无BOM头的文件是否UTF-8编码</p>
<p>loveit</p>
<p>于 2014-11-15 22:39:22 发布</p>
<p>1818<br> 收藏 2<br><a href="http://demon.tw/programming/vbs-validate-utf8.html">http://demon.tw/programming/vbs-validate-utf8.html</a></p>
<p>标签： BOM, UTF-8, VB, VBS, VBScript</p>
<p>标题: 用VBS判断无BOM头的文件是否UTF-8编码<br>作者: Demon<br>链接: <a href="http://demon.tw/programming/vbs-validate-utf8.html">http://demon.tw/programming/vbs-validate-utf8.html</a><br>版权: 本博客的所有文章，都遵守“署名-非商业性使用-相同方式共享 2.5 中国大陆”协议条款。</p>
<p>在 VBS 贴吧看到吧主发的一个《如何区别无BOM头的UTF-8和GBK？》的贴子，故为此文。这种问题都解决不了，VBS 吧主的水平也不过如此。</p>
<p>字节顺序记号（英语：byte-order mark，BOM）是位于码点U+FEFF的统一码字符的名称。当以UTF-16或UTF-32来将UCS/统一码字符所组成的字符串编码时，这个字符被用来标示其字节序。它常被用来当做标示文件是以UTF-8、UTF-16或UTF-32编码的记号。</p>
<p>更多关于 BOM 的资料请自己阅读维基百科。</p>
<p>批处理之家有个《VBS版文件编码识别、转换工具（GB2312、UTF-8、Unicode、BIG5）》的帖子，其中检测文件编码的 CheckCode.vbs 是这么写的：</p>
<p>Function CheckCode (Usage)<br>Dim slz<br>set slz = CreateObject(“Adodb.Stream”)<br>slz.Type = 1<br>slz.Mode = 3<br>slz.Open<br>slz.Position = 0<br>slz.Loadfromfile file<br>Bin=slz.read(2)<br>if AscB(MidB(Bin,1,1))=&amp;HEF and AscB(MidB(Bin,2,1))=&amp;HBB Then<br>Codes=”UTF-8”<br>elseif AscB(MidB(Bin,1,1))=&amp;HFF and AscB(MidB(Bin,2,1))=&amp;HFE Then<br>Codes=”Unicode”<br>else<br>Codes=”GB2312”<br>end if<br>WScript.echo file,Usage,Codes<br>slz.Close<br>set slz = Nothing<br>End Function<br>这个代码只检测了 BOM，把没有 BOM 的文件都认为是 GB2312 编码，很显然是错误的。并不是所有 UTF-8 编码的文件都带 BOM 标记的，事实上，绝大部分 UTF-8 文件都不带 BOM。</p>
<p>理论上，要准确地判断一个文件的编码是很困难的，但是判断 一个文件是否为 UTF-8 编码却相对比较简单，在《构建可扩展的Web站点》一书中就有很好的 PHP 代码：</p>
<?php
function is_valid_utf8(&$input){
    $rx = '[\xC0-\xDF]([^\x80-\xBF]|$)';
    $rx .= '|[\xE0-\xEF].{0,1}([^\x80-\xBF]|$)';
    $rx .= '|[\xF0-\xF7].{0,2}([^\x80-\xBF]|$)';
    $rx .= '|[\xF8-\xFB].{0,3}([^\x80-\xBF]|$)';
    $rx .= '|[\xFC-\xFD].{0,4}([^\x80-\xBF]|$)';
    $rx .= '|[\xFE-\xFE].{0,5}([^\x80-\xBF]|$)';
    $rx .= '|[\x00-\x7F][\x80-\xBF]';
    $rx .= '|[\xC0-\xDF].[\x80-\xBF]';
    $rx .= '|[\xE0-\xEF]..[\x80-\xBF]';
    $rx .= '|[\xF0-\xF7]...[\x80-\xBF]';
    $rx .= '|[\xF8-\xFB]....[\x80-\xBF]';
    $rx .= '|[\xFC-\xFD].....[\x80-\xBF]';
    $rx .= '|[\xFE-\xFE]......[\x80-\xBF]';
    $rx .= '|^[\x80-\xBF]';
    return preg_match("!$rx!", $input) ? 0 : 1;
}
?>
<p>我们要做的就是改写成 VBS：</p>
<p>Function read(path)<br>    ‘将Byte()数组转成String字符串<br>    Dim ado, a(), i, n<br>    Set ado = CreateObject(“ADODB.Stream”)<br>    ado.Type = 1 : ado.Open<br>    ado.LoadFromFile path<br>    n = ado.Size - 1<br>    ReDim a(n)<br>    For i = 0 To n<br>        a(i) = ChrW(AscB(ado.Read(1)))<br>    Next<br>    read = Join(a, “”)<br>End Function</p>
<p>‘Author: Demon<br>‘Date: 2011/11/10<br>‘Website: <a href="http://demon.tw/">http://demon.tw</a></p>
<p>Function is_valid_utf8(ByRef input) ‘ByRef以提高效率<br>    Dim s, re<br>    Set re = New Regexp<br>    s = “<a href="%5B%5E%5Cx80-%5CxBF%5D%7C$">\xC0-\xDF</a>“<br>    s = s &amp; “|[\xE0-\xEF].{0,1}([^\x80-\xBF]|$)”<br>    s = s &amp; “|[\xF0-\xF7].{0,2}([^\x80-\xBF]|$)”<br>    s = s &amp; “|[\xF8-\xFB].{0,3}([^\x80-\xBF]|$)”<br>    s = s &amp; “|[\xFC-\xFD].{0,4}([^\x80-\xBF]|$)”<br>    s = s &amp; “|[\xFE-\xFE].{0,5}([^\x80-\xBF]|$)”<br>    s = s &amp; “|[\x00-\x7F][\x80-\xBF]”<br>    s = s &amp; “|[\xC0-\xDF].[\x80-\xBF]”<br>    s = s &amp; “|[\xE0-\xEF]..[\x80-\xBF]”<br>    s = s &amp; “|[\xF0-\xF7]…[\x80-\xBF]”<br>    s = s &amp; “|[\xF8-\xFB]….[\x80-\xBF]”<br>    s = s &amp; “|[\xFC-\xFD]…..[\x80-\xBF]”<br>    s = s &amp; “|[\xFE-\xFE]……[\x80-\xBF]”<br>    s = s &amp; “|^[\x80-\xBF]”<br>    re.Pattern = s<br>    is_valid_utf8 = (Not re.Test(input))<br>End Function</p>
<p>s = read(“utf-8.txt”) ‘读取文件<br>WScript.Echo is_valid_utf8(s) ‘判断是否UTF-8</p>
<p>+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</p>
<p>yu2n说道： </p>
<pre><code>2014年08月16日 14:08 
</code></pre>
<p>[code]<br>‘ 检察文件是否为UTF-8，有BOM/无BOM皆可，读取文件BOM头/前4Kbit判读<br>Function is_valid_utf8(ByVal file)<br>is_valid_utf8 = False<br>‘将Byte()数组转成String字符串<br>Dim ado, a(), i, n, Bin, s, re<br>Set ado = CreateObject(“ADODB.Stream”)<br>ado.Type = 1 : ado.Open<br>ado.LoadFromFile file<br>n = ado.Size - 1<br>‘ 检查空文件/限制读取4Kbit<br>If n = 1024<em>4-1 Then n = 1024</em>4-1 ‘4Kbit<br>‘ 使用BOM判断<br>Bin = ado.read(2)<br>If AscB(MidB(Bin,1,1)) = &amp;HEF And AscB(MidB(Bin,2,1)) = &amp;HBB Then<br>is_valid_utf8 = True : Exit Function<br>End If<br>‘将Byte()数组转成String字符串<br>ReDim a(n) : ado.Position = 0<br>For i = 0 To n<br>a(i) = ChrW(AscB(ado.Read(1)))<br>Next<br>‘使用正则表达式判断<br>Set re = New Regexp<br>s = “<a href="%5B%5E%5Cx80-%5CxBF%5D%7C$">\xC0-\xDF</a>“<br>s = s &amp; “|[\xE0-\xEF].{0,1}([^\x80-\xBF]|$)”<br>s = s &amp; “|[\xF0-\xF7].{0,2}([^\x80-\xBF]|$)”<br>s = s &amp; “|[\xF8-\xFB].{0,3}([^\x80-\xBF]|$)”<br>s = s &amp; “|[\xFC-\xFD].{0,4}([^\x80-\xBF]|$)”<br>s = s &amp; “|[\xFE-\xFE].{0,5}([^\x80-\xBF]|$)”<br>s = s &amp; “|[\x00-\x7F][\x80-\xBF]”<br>s = s &amp; “|[\xC0-\xDF].[\x80-\xBF]”<br>s = s &amp; “|[\xE0-\xEF]..[\x80-\xBF]”<br>s = s &amp; “|[\xF0-\xF7]…[\x80-\xBF]”<br>s = s &amp; “|[\xF8-\xFB]….[\x80-\xBF]”<br>s = s &amp; “|[\xFC-\xFD]…..[\x80-\xBF]”<br>s = s &amp; “|[\xFE-\xFE]……[\x80-\xBF]”<br>s = s &amp; “|^[\x80-\xBF]”<br>re.Pattern = s<br>is_valid_utf8 = (Not re.Test(Join(a, “”)))<br>End Function<br>[/code]</p>
<hr>
<p>您可以使用VBA的 InStr 函数来判断文本文件中的换行符，从而确定文件是Unix、Windows还是Mac格式。</p>
<p>以下是一个简单的例子：</p>
<p>vba<br>Function GetTextFormat(ByVal Text As String) As String<br>    Dim PosUnix As Integer, PosWindows As Integer, PosMac As Integer<br>    Dim Result As String</p>
<pre><code>PosUnix = InStr(Text, Chr(10)) &#39; Unix (LF)
PosWindows = InStr(Text, Chr(13) &amp; Chr(10)) &#39; Windows (CRLF)
PosMac = InStr(Text, Chr(13)) &#39; Mac (CR)

If PosUnix &gt; 0 And PosWindows = 0 And PosMac = 0 Then
    Result = &quot;Unix&quot;
ElseIf PosWindows &gt; 0 And PosUnix = 0 And PosMac = 0 Then
    Result = &quot;Windows&quot;
ElseIf PosMac &gt; 0 And PosWindows = 0 And PosUnix = 0 Then
    Result = &quot;Mac&quot;
Else
    Result = &quot;Unknown&quot;
End If

GetTextFormat = Result
</code></pre>
<p>End Function</p>
<hr>
<p>utils<br>‘———————————————-<br>‘名称   ：splitAndSpliceStr<br>‘機能   ：分割とスプライス文字列。<br>‘引数   ：文字列(sourceStr)，<br>‘         分割文字(splitStr)<br>‘         スプライス文字(spliceStr)<br>‘         文字列の開始削除文字(delStr)<br>‘戻値   ：文字列<br>‘———————————————-<br>Public Function splitAndSpliceStr(ByVal sourceStr As String, ByVal splitStr As String, ByVal spliceStr As String, ByVal delStr As String) As String<br>    Dim afterStr As String<br>    atrr = Split(sourceStr, splitStr)<br>    For i = LBound(atrr) To UBound(atrr)</p>
<pre><code>    iPos = InStr(1, Trim(atrr(i)), delStr)
    
    If afterStr = &quot;&quot; And iPos = 1 Then
        afterStr = Mid(sourceCollection(i), 2)
        
    ElseIf afterStr = &quot;&quot; And iPos &lt;&gt; 1 Then
        afterStr = Mid(sourceCollection(i), 1)
        
    ElseIf afterStr &lt;&gt; &quot;&quot; And iPos = 1 Then
        afterStr = afterStr &amp; spliceStr &amp; Mid(sourceCollection(i), 2)
    
    ElseIf afterStr &lt;&gt; &quot;&quot; And iPos &lt;&gt; 1 Then
        afterStr = afterStr &amp; spliceStr &amp; Mid(sourceCollection(i), 1)
    
    End If
Next
splitAndSpliceStr = afterStr
</code></pre>
<p>End Function</p>
<p>‘———————————————-<br>‘名称   ：readKeyWord<br>‘機能   ：プロパティのキーとValueの読む<br>‘引数   ：開始範囲(startRange),<br>‘         終了範囲(endRange),<br>‘         拠点名範囲(palceSettingRange),<br>‘         プロパティのファイルパス(readFileNamePath),<br>‘戻値   ：ない<br>‘———————————————-<br>Public Function readKeyWord(ByVal startRange As Range, ByVal endRange As Range, ByVal palceSettingRange As Range, ByVal readFileNamePath As String)<br>    Dim dateStart As Date<br>    dateStart = Timer<br>    ‘Log<br>    Call writeLog.debugLog(“モジュール:Read_Write  メソッド:readKeyWord()  Start.”)</p>
<pre><code>Call writeLog.debugLog(&quot;プロパティ:&quot; &amp; readFileNamePath)

Dim wsWork As Worksheet
&#39;数値ディクショナリ
Set Dic = CreateObject(&quot;Scripting.Dictionary&quot;)
&#39;ワークシート
Set wsWork = ThisWorkbook.Worksheets(WORK_SHEET_NAME)

&#39;A列に、Dで記載した削除対象は出力対象外とする。
If wsWork.Range(A_MARK &amp; startRange.Row).Value = DEL_FLG Then
    Exit Function
End If

&#39;ファイルが存在しない場合
If Utils.fileExists(readFileNamePath) = False Then
    &#39;フォルダが存在しない場合，フォルダ作成
    If Utils.fileFolderExists(Left(readFileNamePath, InStrRev(readFileNamePath, &quot;\&quot;))) = False Then
        MkDir Left(readFileNamePath, InStrRev(readFileNamePath, &quot;\&quot;))
    End If

    &#39;ファイルに書き込まれた文字
    Dim newStr
    newStr = Null
    For Each Rng In wsWork.Range(KEY_WORK_FIX_COL &amp; (startRange.Row + 2) &amp; &quot;: &quot; &amp; KEY_WORK_FIX_COL &amp; endRange.Row)
        If Rng &lt;&gt; &quot;&quot; And wsWork.Range(A_MARK &amp; Rng.Row).Value &lt;&gt; DEL_FLG Then
            &#39;ファイルに書き込まれた文字初期化
            If IsNull(newStr) Then
                newStr = Rng.Value &amp; &quot;=&quot; &amp; wsWork.Cells(Rng.Row, palceSettingRange.Column).Value
            Else
                newStr = newStr &amp; vbCrLf &amp; Rng.Value &amp; &quot;=&quot; &amp; wsWork.Cells(Rng.Row, palceSettingRange.Column).Value
            End If
        End If
    Next
    &#39;ファイルの保存
    Call Utils.saveToFile(newStr, readFileNamePath)
    
&#39;ファイルが存在する場合
Else
    &#39;既存のファイルの文字列
    Dim sourceStr As String
    sourceStr = Utils.readFileAll(readFileNamePath)
    &#39;既存のファイルの文字配列
    Dim sourceAttr() As String
    &#39;文字格式の改行コード
    Dim changeLineCode As String
    changeLineCode = Utils.getTextFormat(sourceStr)
    sourceAttr = Utils.splitString(sourceStr, changeLineCode)
    
    &#39;前の値の終了文字列
    Dim befValueStr As String
    &#39;既存のファイルの数値ディクショナリ
    Set sourceDic = CreateObject(&quot;Scripting.Dictionary&quot;)
    &#39;既存のファイルの削除文字の数値ディクショナリ
    Set sourceDicDel = CreateObject(&quot;Scripting.Dictionary&quot;)

    &#39;値の文字配列
    Dim sValueAttr() As String
    Dim index As Integer
    
    &#39;削除値の文字配列
    Dim sValueDelAttr() As String
    Dim indexDel As Integer
    
    &#39;既存のファイルの文字配列コレクション
    Dim sourceCollection As New Collection
    Dim sname As String, sNoTrimName As String, sValue As String, sDelValue As String
    Dim lineValue As String, befEndStr As String, endStr As String
    
    For i = LBound(sourceAttr, 1) To UBound(sourceAttr, 1)
        endStr = Right(sourceAttr(i), 1)
        If endStr &lt;&gt; &quot;\&quot; And befEndStr &lt;&gt; &quot;\&quot; Then
            sourceCollection.Add sourceAttr(i)
            befEndStr = Right(sourceAttr(i), 1)
        ElseIf endStr &lt;&gt; &quot;\&quot; And befEndStr = &quot;\&quot; Then
            sourceCollection.Add lineValue &amp; sourceAttr(i)
            If endStr = &quot;&quot; Then
                sourceCollection.Add sourceAttr(i)
            End If
            befEndStr = Right(sourceAttr(i), 1)
        ElseIf endStr = &quot;\&quot; And befEndStr &lt;&gt; &quot;\&quot; Then
            lineValue = sourceAttr(i)
            befEndStr = Right(sourceAttr(i), 1)
        ElseIf endStr = &quot;\&quot; And befEndStr = &quot;\&quot; Then
            lineValue = lineValue &amp; changeLineCode &amp; sourceAttr(i)
            befEndStr = Right(sourceAttr(i), 1)
        End If
    Next
    
    For i = 1 To sourceCollection.Count
        Debug.Print sourceCollection(i)
        &#39; # で始めるかどうか
        &#39;文字列が # で始まらない
        If InStr(1, Trim(sourceCollection(i)), &quot;#&quot;) &lt;&gt; 1 Then
            &#39;&quot;=&quot;分割
            iPos = InStr(1, sourceCollection(i), &quot;=&quot;)
            If iPos &lt;&gt; 0 Then
                sname = Trim(Left(sourceCollection(i), iPos - 1)) &#39;key
                sValue = CStr(Mid(sourceCollection(i), iPos + 1, Len(sourceCollection(i)) - iPos)) &#39;value
                If sourceDic.Exists(sname) = True Then
                    sValueAttr() = sourceDic.item(sname)
                    ReDim Preserve sValueAttr(0 To UBound(sValueAttr, 1) + 1)
                    sValueAttr(UBound(sValueAttr, 1)) = sValue
                Else
                    ReDim sValueAttr(0 To 0)
                    sValueAttr(0) = sValue
                End If
                sourceDic.item(sname) = sValueAttr()
                
            End If
        &#39;# で始まる文字列
        Else
            iPos = InStr(1, Mid(sourceCollection(i), 2), &quot;=&quot;)
            If iPos &lt;&gt; 0 Then
                sname = Trim(Left(Mid(sourceAttr(i), 2), iPos - 1)) &#39;key
                sValue = CStr(Mid(Mid(sourceAttr(i), 2), iPos + 1, Len(Mid(sourceAttr(i), 2)) - iPos)) &#39;value
                sValue = Utils.splitAndSpliceStr(sValue, changeLineCode, changeLineCode, &quot;#&quot;)
                If sourceDic.Exists(sname) = True Then
                    sValueAttr() = sourceDic.item(sname)
                    ReDim Preserve sValueAttr(0 To UBound(sValueAttr, 1) + 1)
                    sValueAttr(UBound(sValueAttr, 1)) = sValue
                Else
                    ReDim sValueAttr(0 To 0)
                    sValueAttr(0) = sValue
                End If
                sourceDic.item(sname) = sValueAttr()
                
                If sourceDicDel.Exists(sname) = True Then
                    sValueDelAttr() = sourceDicDel.item(sname)
                    ReDim Preserve sValueDelAttr(0 To UBound(sValueDelAttr, 1) + 1)
                    sValueDelAttr(UBound(sValueDelAttr, 1)) = sValue
                Else
                    ReDim sValueDelAttr(0 To 0)
                    sValueDelAttr(0) = sValue
                End If
                sourceDicDel.item(sname) = sValueDelAttr()
                
            End If
        End If
    Next


    &#39;新規ファイル文字列(1.Excelファイルが存在する場合,既存のファイルの文字列キーが存在しない場合)
    Dim addNewStr
    addNewStr = Null
    &#39;Excelファイルの数値ディクショナリ
    Set sourceExcelDic = CreateObject(&quot;Scripting.Dictionary&quot;)
    
    For Each Rng In wsWork.Range(KEY_WORK_FIX_COL &amp; (startRange.Row + 2) &amp; &quot;: &quot; &amp; KEY_WORK_FIX_COL &amp; endRange.Row)
        If Rng &lt;&gt; &quot;&quot; And wsWork.Range(A_MARK &amp; Rng.Row).Value &lt;&gt; DEL_FLG Then
            &#39;既存のファイルの文字列キーが存在しない場合,Excelファイルが存在する場合
            If sourceDic.Exists(Rng.Value) = False Then
                &#39;ファイルに書き込まれた文字初期化
                If IsNull(addNewStr) Then
                    addNewStr = changeLineCode &amp; Rng.Value &amp; &quot;=&quot; &amp; wsWork.Cells(Rng.Row, palceSettingRange.Column).Value
                Else
                    addNewStr = addNewStr &amp; changeLineCode &amp; Rng.Value &amp; &quot;=&quot; &amp; wsWork.Cells(Rng.Row, palceSettingRange.Column).Value
                End If
            End If
            sourceExcelDic.item(Rng.Value) = wsWork.Cells(Rng.Row, palceSettingRange.Column).Value
        End If
    Next
    
    &#39;既存のファイルの文字列と新規ファイル文字列
    Dim sourceNewStr
    sourceNewStr = Null
    
    For i = 1 To sourceCollection.Count
        Debug.Print sourceCollection(i)
        &#39; # で始めるかどうか
        &#39;文字列が # で始まらない
        If InStr(1, Trim(sourceCollection(i)), &quot;#&quot;) &lt;&gt; 1 Then
            &#39;&quot;=&quot;分割
            iPos = InStr(1, sourceCollection(i), &quot;=&quot;)
            &#39;存在keyとValueの場合
            If iPos &lt;&gt; 0 Then
                sname = Trim(Left(sourceCollection(i), iPos - 1)) &#39;key
            &#39;空文字列の場合
            ElseIf sourceCollection(i) = &quot;&quot; Then
                sname = sourceCollection(i)
            End If
        &#39;# で始まる文字列
        Else
            &#39;&quot;=&quot;分割
            iPos = InStr(1, Mid(sourceCollection(i), 2), &quot;=&quot;)
            &#39;存在keyとValueの場合
            If iPos &lt;&gt; 0 Then
                sname = Trim(Left(Mid(sourceCollection(i), 2), iPos - 1)) &#39;key
            Else
                sname = sourceCollection(i)
            End If
        End If
        
        If sourceExcelDic.Exists(sname) And sourceDic.Exists(sname) Then
            sourceDicDel.Exists (sname)
        
        ElseIf sourceExcelDic.Exists(sname) And sourceDic.Exists(sname) = False Then
        
        ElseIf sourceExcelDic.Exists(sname) = False And sourceDic.Exists(sname) Then
            sourceDicDel.Exists (sname)
        
        ElseIf sourceExcelDic.Exists(sname) = False And sourceDic.Exists(sname) = False Then
        
    Next
    
    
    
    
    
    
    
    
    &#39;前のキーの終了文字列
    Dim befKeyStr As String

    For i = LBound(sourceAttr, 1) To UBound(sourceAttr, 1)
    
        Dim deleteFlg As Boolean
        deleteFlg = False

        &#39; # で始めるかどうか
        &#39;文字列が # で始まらない
        If InStr(1, Trim(sourceAttr(i)), &quot;#&quot;) &lt;&gt; 1 Then
            &#39;&quot;=&quot;分割
            iPos = InStr(1, sourceAttr(i), &quot;=&quot;)
            &#39;存在keyとValueの場合
            If iPos &lt;&gt; 0 Then
                sname = Trim(Left(sourceAttr(i), iPos - 1)) &#39;key
            &#39;空文字列の場合
            ElseIf sourceAttr(i) = &quot;&quot; Then
                sname = sourceAttr(i)
            End If
        &#39;# で始まる文字列
        Else
        
            deleteFlg = True
            
            &#39;&quot;=&quot;分割
            iPos = InStr(1, Mid(sourceAttr(i), 2), &quot;=&quot;)
            &#39;存在keyとValueの場合
            If iPos &lt;&gt; 0 Then
                sname = Trim(Left(Mid(sourceAttr(i), 2), iPos - 1)) &#39;key
            Else
                sname = sourceAttr(i)
            End If
        End If
        
        &#39;2.Excelファイルが存在する場合,既存のファイルの文字列キーが存在する場合
        If sourceExcelDic.Exists(sname) And sourceDic.Exists(sname) Then
            &#39;キーが追加されていない場合
            If befKeyStr &lt;&gt; sname Then
                &#39;値が等しい場合
                If sourceExcelDic.item(sname) = sourceDic.item(sname) Then
                    If IsNull(sourceNewStr) Then
                        sourceNewStr = sname &amp; &quot;=&quot; &amp; sourceDic.item(sname)
                    Else
                        sourceNewStr = sourceNewStr &amp; changeLineCode &amp; sname &amp; &quot;=&quot; &amp; sourceDic.item(sname)
                    End If
                &#39;値が等しくない場合
                Else
                    If IsNull(sourceNewStr) Then
                        sourceNewStr = sname &amp; &quot;=&quot; &amp; sourceExcelDic.item(sname)
                    Else
                        sourceNewStr = sourceNewStr &amp; changeLineCode &amp; sname &amp; &quot;=&quot; &amp; sourceExcelDic.item(sname)
                    End If
                End If
                befKeyStr = sname
            End If
        &#39;3.Excelファイルが存在しない場合,既存のファイルの文字列キーが存在する場合
        ElseIf sourceExcelDic.Exists(sname) = False And sourceDic.Exists(sname) Then
            &#39;キーが追加されていない場合
            If befKeyStr &lt;&gt; sname Then
                &#39;削除文字列場合
                If sourceDicDel.Exists(sname) Then
                    If IsNull(sourceNewStr) Then
                        sourceNewStr = &quot;#&quot; &amp; sname &amp; &quot;=&quot; &amp; sourceDicDel.item(sname)
                    Else
                        sourceNewStr = sourceNewStr &amp; changeLineCode &amp; &quot;#&quot; &amp; sname &amp; &quot;=&quot; &amp; sourceDicDel.item(sname)
                    End If
                &#39;削除文字列ない場合
                Else
                    If IsNull(sourceNewStr) Then
                        sourceNewStr = sname &amp; &quot;=&quot; &amp; sourceDic.item(sname)
                    Else
                        sourceNewStr = sourceNewStr &amp; changeLineCode &amp; sname &amp; &quot;=&quot; &amp; sourceDic.item(sname)
                    End If
                End If

                befKeyStr = sname
            End If
        &#39;その他の条件(4.Excelファイルが存在しない場合,既存のファイルの文字列キーが存在しない場合)
        Else
            If IsNull(sourceNewStr) Then
                sourceNewStr = sourceAttr(i)
            Else
                sourceNewStr = sourceNewStr &amp; changeLineCode &amp; sourceAttr(i)
            End If
        End If
    Next
    sourceNewStr = sourceNewStr &amp; addNewStr
    MsgBox sourceNewStr
    &#39;ファイルの保存
    Call Utils.saveToFile(sourceNewStr, readFileNamePath)
End If


&#39;Log
Call writeLog.debugLog(&quot;実行時間:　&quot; &amp; format((Timer - dateStart), &quot;0.00000&quot;) &amp; &quot; 秒&quot;)
&#39;Log
Call writeLog.debugLog(&quot;モジュール:Read_Write  メソッド:readKeyWord()  End. &quot;)
</code></pre>
<p>End Function</p>
]]></content>
      <tags>
        <tag>VBA</tag>
      </tags>
  </entry>
</search>
